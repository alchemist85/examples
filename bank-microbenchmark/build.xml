<?xml version="1.0" encoding="ISO-8859-1"?>
<project basedir="." default="compile" name="A very simple bank example using the fenix-framework">
  
  <property name="src.dir" location="src"/>
  <property name="src.gen.dir" location="src_gen"/>
  <property name="common.java.dir" location="${src.dir}/common/java"/>
  <property name="ff.src.dir" location="${src.dir}/fenix-framework"/>
  <property name="dml.src.dir" location="${ff.src.dir}/dml"/>
  <property name="ff.java.dir" location="${ff.src.dir}/java"/>
  <property name="hibernate.src.dir" location="${src.dir}/hibernate"/>
  <property name="hibernate.java.dir" location="${hibernate.src.dir}/java"/>
  <property name="hibernate.etc.dir" location="${hibernate.src.dir}/etc"/>
  <property name="build.dir" location="classes"/>
  <property name="bank.dml" location="${dml.src.dir}/bank.dml"/>
  <property name="framework.dir" location="../../"/>
  <property name="framework.lib.dir" location="${framework.dir}/lib"/>
  <property name="framework.build.dir" location="${framework.dir}/build/classes"/>
  <property name="hibernate.lib.dir" location="lib-hibernate"/>

  <property name="txsys.ff" value="pt.ist.fenixframework.example.bankbench.ff.FFTxSystem"/>
  <property name="txsys.hib" value="pt.ist.fenixframework.example.bankbench.hib.HibTxSystem"/>
 
  <!-- java.file.encoding should match your terminal's encoding -->
  <property name="java.file.encoding" value="UTF-8"/>

  <import file="${framework.dir}/src/etc/dml-generate.xml"/>

  <path id="hib.project.class.path">
    <pathelement path="${build.dir}"/>
    <fileset dir="${hibernate.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>


  <path id="ff.project.class.path">
    <pathelement path="${build.dir}"/>
    <pathelement path="${framework.build.dir}"/>
    <fileset dir="${framework.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>

  <path id="full.project.class.path">
    <pathelement path="${build.dir}"/>
    <pathelement path="${framework.build.dir}"/>
    <fileset dir="${framework.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
    <fileset dir="${hibernate.lib.dir}">
      <include name="**/*.jar"/>
    </fileset>
  </path>


  <target name="clean-all" description="Removes any generated files">
    <delete dir="${build.dir}"/>
    <delete dir="${src.gen.dir}"/>
  </target>

  <target name="generate-domain" description="Generates the domain classes">
    <dml-compile dml="${bank.dml}" java-sources="${ff.java.dir}" java-gen="${src.gen.dir}">
      <classpath refid="ff.project.class.path"/>
    </dml-compile>
  </target>

  <target name="compile" depends="generate-domain" description="Compiles all the source code">
    <mkdir dir="${build.dir}"/>
    <javac destdir="${build.dir}" extdirs="${framework.lib.dir}:${hibernate.lib.dir}" target="1.5" debug="on">
      <src path="${common.java.dir}"/>
      <src path="${ff.java.dir}"/>
      <src path="${src.gen.dir}"/>
      <src path="${hibernate.java.dir}"/>
      <classpath refid="full.project.class.path"/>
    </javac>

    <post-process-domain dir="${build.dir}" dml="${bank.dml}">
      <jvmarg value="-Dfile.encoding=${java.file.encoding}" />
      <classpath refid="ff.project.class.path"/>
    </post-process-domain>

    <copy todir="${build.dir}">
      <fileset dir="${dml.src.dir}" />
      <fileset dir="${hibernate.etc.dir}" />
    </copy>
  </target>


  <macrodef name="run-populate-domain">
    <attribute name="txsystem" />
    <attribute name="classpathid" />
    <attribute name="numClients" default="1000" />
    <attribute name="accountsPerClient" default="10" />
    <attribute name="initialAmount" default="1000" />
    <sequential>
      <java classname="pt.ist.fenixframework.example.bankbench.PopulateDomain" fork="true">
        <jvmarg value="-Dtxsystem.classname=@{txsystem}" />
        <!-- jvmarg value="-agentlib:yjpagent=sampling,onexit=snapshot"/ -->
        <!-- jvmarg value="-agentlib:yjpagent=alloc,onexit=memory"/ -->
        <arg value="@{numClients}"/>
        <arg value="@{accountsPerClient}"/>
        <arg value="@{initialAmount}"/>
        <classpath refid="@{classpathid}"/>
      </java>
    </sequential>
  </macrodef>

  <target name="populate-domain-ff" depends="compile" description="creates domain objects for FF">
    <run-populate-domain txsystem="${txsys.ff}" classpathid="ff.project.class.path" />
  </target>

  <target name="populate-domain-hib" depends="compile" description="creates domain objects for Hibernate">
    <run-populate-domain txsystem="${txsys.hib}" classpathid="hib.project.class.path" />
  </target>


  <macrodef name="run-bench">
    <attribute name="txsystem" />
    <attribute name="classpathid" />
    <attribute name="numThreads" default="20" />
    <attribute name="maxClientId" default="1000" />
    <attribute name="loops" default="100000" />
    <sequential>
      <java classname="pt.ist.fenixframework.example.bankbench.Main" fork="true">
        <jvmarg value="-Dtxsystem.classname=@{txsystem}" />
        <jvmarg value="-Xmx512M"/>
        <!-- jvmarg value="-agentlib:yjpagent=sampling,onexit=snapshot"/ -->
        <arg value="@{numThreads}"/>
        <arg value="@{maxClientId}"/>
        <arg value="@{loops}"/>
        <classpath refid="@{classpathid}"/>
      </java>
    </sequential>
  </macrodef>


  <target name="bench-ff" depends="compile" description="runs the FF benchmark">
    <run-bench txsystem="${txsys.ff}" classpathid="ff.project.class.path" />
  </target>

  <target name="bench-hib" depends="compile" description="runs the Hibernate benchmark">
    <run-bench txsystem="${txsys.hib}" classpathid="hib.project.class.path" />
  </target>
</project>
